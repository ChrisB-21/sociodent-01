import React, { useState, useEffect } from 'react';
import { ref, get, update, onValue, query, orderByChild } from 'firebase/database';
import { db } from '@/firebase';
import { useToast } from '@/hooks/use-toast';
import { Button } from "@/components/ui/button";
import { Input } from "@/components/ui/input";
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select";
import { Calendar, Clock, Search, RefreshCw, UserCheck, AlertTriangle } from 'lucide-react';
import DoctorReassignmentModal from './DoctorReassignmentModal';
import { assignDoctorsToAllPendingAppointments } from '@/lib/doctorAssignment';

interface Appointment {
  id: string;
  userId: string;
  userName: string;
  userEmail?: string;
  consultationType: 'virtual' | 'home' | 'clinic';
  date: string;
  time: string;
  symptoms: string;
  status: 'pending' | 'confirmed' | 'completed' | 'cancelled';
  doctorId?: string;
  doctorName?: string;
  specialization?: string;
  address?: string;
  paymentMethod?: string;
  paymentAmount?: number;
  createdAt: number;
  updatedAt?: number;
}

const statusColors = {
  pending: 'bg-yellow-100 text-yellow-800',
  confirmed: 'bg-green-100 text-green-800',
  completed: 'bg-blue-100 text-blue-800',
  cancelled: 'bg-red-100 text-red-800'
};

const AdminAppointmentsManager = () => {
  const [appointments, setAppointments] = useState<Appointment[]>([]);
  const [filteredAppointments, setFilteredAppointments] = useState<Appointment[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [statusFilter, setStatusFilter] = useState('all');
  const [dateFilter, setDateFilter] = useState('');
  const [searchQuery, setSearchQuery] = useState('');
  const [isProcessingBatch, setIsProcessingBatch] = useState(false);
  const [showReassignModal, setShowReassignModal] = useState(false);
  const [selectedAppointment, setSelectedAppointment] = useState<Appointment | null>(null);
  
  const { toast } = useToast();

  // Load appointments when component mounts
  useEffect(() => {
    const appointmentsRef = ref(db, 'appointments');
    
    const unsubscribe = onValue(appointmentsRef, (snapshot) => {
      if (snapshot.exists()) {
        const appointmentsData: Appointment[] = [];
        
        snapshot.forEach((childSnapshot) => {
          const appointment = {
            id: childSnapshot.key,
            ...childSnapshot.val()
          } as Appointment;
          
          appointmentsData.push(appointment);
        });
        
        // Sort by date and time (newest first for management)
        appointmentsData.sort((a, b) => {
          // If dates are the same, sort by time
          if (a.date === b.date) {
            return a.time.localeCompare(b.time);
          }
          
          // Sort by date (newest first)
          const dateA = new Date(a.date);
          const dateB = new Date(b.date);
          return dateA.getTime() - dateB.getTime();
        });
        
        setAppointments(appointmentsData);
        setFilteredAppointments(appointmentsData);
      } else {
        setAppointments([]);
        setFilteredAppointments([]);
      }
      
      setIsLoading(false);
    }, (error) => {
      console.error('Error fetching appointments:', error);
      toast({
        title: 'Error',
        description: 'Failed to load appointments. Please try again.',
        variant: 'destructive'
      });
      setIsLoading(false);
    });
    
    return () => unsubscribe();
  }, [toast]);

  // Apply filters when filter values change
  useEffect(() => {
    let filtered = [...appointments];
    
    // Apply status filter
    if (statusFilter !== 'all') {
      filtered = filtered.filter(app => app.status === statusFilter);
    }
    
    // Apply date filter
    if (dateFilter) {
      filtered = filtered.filter(app => app.date === dateFilter);
    }
    
    // Apply search query
    if (searchQuery) {
      const query = searchQuery.toLowerCase();
      filtered = filtered.filter(
        app => 
          (app.userName && app.userName.toLowerCase().includes(query)) || 
          (app.doctorName && app.doctorName.toLowerCase().includes(query)) ||
          (app.specialization && app.specialization.toLowerCase().includes(query))
      );
    }
    
    setFilteredAppointments(filtered);
  }, [appointments, statusFilter, dateFilter, searchQuery]);

  // Function to process batch assignment
  const handleBatchAssignment = async () => {
    try {
      setIsProcessingBatch(true);
      
      console.log('Starting batch doctor assignment process');
      const result = await assignDoctorsToAllPendingAppointments();
      console.log('Batch assignment result:', result);
      
      toast({
        title: 'Batch Assignment Complete',
        description: `Processed ${result.total} appointments: ${result.successful} successful, ${result.failed} failed.`,
        variant: result.failed > 0 ? 'destructive' : 'default'
      });
      
      // If there were failures, show details in console for debugging
      if (result.failed > 0) {
        console.error('Failed assignments:', result.details.filter(d => !d.success));
      }
    } catch (error) {
      console.error('Error during batch assignment:', error);
      
      // Provide more detailed error information
      let errorMessage = 'Failed to process batch assignment. Please try again.';
      if (error instanceof Error) {
        errorMessage = `Error: ${error.message}`;
      }
      
      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive'
      });
    } finally {
      setIsProcessingBatch(false);
    }
  };
  };

  // Function to handle appointment status changes
  const handleStatusChange = async (appointmentId: string, newStatus: string) => {
    try {
      const appointmentRef = ref(db, `appointments/${appointmentId}`);
      
      // Get current appointment data for validation
      const appointmentSnapshot = await get(appointmentRef);
      if (!appointmentSnapshot.exists()) {
        throw new Error('Appointment not found');
      }
      
      const appointmentData = appointmentSnapshot.val();
      console.log('Current appointment data:', appointmentData);
      
      // Prepare update data
      const updateData = {
        status: newStatus,
        updatedAt: Date.now()
      };
      
      console.log('Updating appointment with data:', updateData);
      
      // Update the appointment
      await update(appointmentRef, updateData);
      
      toast({
        title: 'Status Updated',
        description: `Appointment status changed to ${newStatus}.`,
      });
    } catch (error) {
      console.error('Error updating appointment status:', error);
      
      // More descriptive error message based on error type
      let errorMessage = 'Failed to update appointment status. Please try again.';
      if (error instanceof Error) {
        if (error.message.includes('permission_denied')) {
          errorMessage = 'Permission denied. You may not have access to update this appointment.';
        } else if (error.message.includes('not found')) {
          errorMessage = 'Appointment not found. It may have been deleted.';
        }
      }
      
      toast({
        title: 'Error',
        description: errorMessage,
        variant: 'destructive'
      });
    }
  };

  // Function to open reassignment modal
  const openReassignModal = (appointment: Appointment) => {
    setSelectedAppointment(appointment);
    setShowReassignModal(true);
  };

  // Handle reassignment complete
  const handleReassignmentComplete = () => {
    // No need to manually update state, as we're using onValue which will update automatically
    toast({
      title: 'Reassignment Complete',
      description: 'The doctor has been successfully reassigned.',
    });
  };

  // Get counts for status badges
  const getPendingCount = () => appointments.filter(a => a.status === 'pending').length;
  const getUnassignedCount = () => appointments.filter(a => a.status === 'pending' && !a.doctorId).length;

  // Format date for display
  const formatDate = (dateStr: string) => {
    try {
      const date = new Date(dateStr);
      return date.toLocaleDateString(undefined, { 
        weekday: 'short', 
        year: 'numeric', 
        month: 'short', 
        day: 'numeric' 
      });
    } catch (e) {
      return dateStr;
    }
  };

  return (
    <div className="container mx-auto p-4">
      <div className="mb-8">
        <h2 className="text-2xl font-bold mb-4">Appointment Management</h2>
        
        <div className="flex flex-wrap items-center gap-3 mb-6">
          <div className="flex items-center gap-2">
            <div className="bg-yellow-100 text-yellow-800 px-3 py-1 rounded-full text-sm">
              Pending: {getPendingCount()}
            </div>
            {getUnassignedCount() > 0 && (
              <div className="bg-red-100 text-red-800 px-3 py-1 rounded-full text-sm flex items-center">
                <AlertTriangle className="w-3 h-3 mr-1" />
                Unassigned: {getUnassignedCount()}
              </div>
            )}
          </div>
          
          <Button 
            variant="outline" 
            className="ml-auto flex items-center gap-1"
            onClick={handleBatchAssignment}
            disabled={isProcessingBatch || getUnassignedCount() === 0}
          >
            <UserCheck className="w-4 h-4" />
            {isProcessingBatch ? 'Processing...' : 'Batch Assign Doctors'}
          </Button>
        </div>
        
        <div className="grid grid-cols-1 md:grid-cols-3 gap-4 mb-6">
          {/* Search */}
          <div className="relative">
            <Search className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              type="text"
              placeholder="Search patient or doctor..."
              className="pl-10"
              value={searchQuery}
              onChange={(e) => setSearchQuery(e.target.value)}
            />
          </div>
          
          {/* Status Filter */}
          <Select value={statusFilter} onValueChange={setStatusFilter}>
            <SelectTrigger>
              <SelectValue placeholder="Filter by status" />
            </SelectTrigger>
            <SelectContent>
              <SelectItem value="all">All Statuses</SelectItem>
              <SelectItem value="pending">Pending</SelectItem>
              <SelectItem value="confirmed">Confirmed</SelectItem>
              <SelectItem value="completed">Completed</SelectItem>
              <SelectItem value="cancelled">Cancelled</SelectItem>
            </SelectContent>
          </Select>
          
          {/* Date Filter */}
          <div className="relative">
            <Calendar className="absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4" />
            <Input
              type="date"
              className="pl-10"
              value={dateFilter}
              onChange={(e) => setDateFilter(e.target.value)}
            />
          </div>
        </div>
      </div>
      
      {isLoading ? (
        <div className="text-center py-12">
          <div className="animate-spin rounded-full h-12 w-12 border-t-2 border-b-2 border-sociodent-600 mx-auto mb-4"></div>
          <p className="text-gray-500">Loading appointments...</p>
        </div>
      ) : filteredAppointments.length === 0 ? (
        <div className="text-center py-12 bg-gray-50 rounded-xl">
          <Calendar className="w-16 h-16 text-gray-400 mx-auto mb-4" />
          <h3 className="text-xl font-medium text-gray-700 mb-2">No appointments found</h3>
          <p className="text-gray-500">Try adjusting your filters to see more results.</p>
        </div>
      ) : (
        <div className="overflow-x-auto">
          <table className="w-full bg-white shadow-sm rounded-lg overflow-hidden">
            <thead className="bg-gray-50">
              <tr>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Patient</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Date & Time</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Type</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Doctor</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Status</th>
                <th className="px-4 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Actions</th>
              </tr>
            </thead>
            <tbody className="divide-y divide-gray-200">
              {filteredAppointments.map((appointment) => (
                <tr key={appointment.id} className="hover:bg-gray-50">
                  <td className="px-4 py-4 whitespace-nowrap">
                    <div className="font-medium text-gray-900">{appointment.userName}</div>
                    <div className="text-gray-500 text-sm">{appointment.userEmail}</div>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    <div className="text-gray-900">{formatDate(appointment.date)}</div>
                    <div className="text-gray-500 text-sm flex items-center">
                      <Clock className="w-3 h-3 mr-1" />
                      {appointment.time}
                    </div>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    <span className="capitalize">{appointment.consultationType}</span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    {appointment.doctorName ? (
                      <div>
                        <div className="font-medium">{appointment.doctorName}</div>
                        <div className="text-gray-500 text-sm">{appointment.specialization}</div>
                      </div>
                    ) : (
                      <span className="text-gray-500 italic">Not assigned</span>
                    )}
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap">
                    <span className={`px-2 py-1 rounded-full text-xs ${statusColors[appointment.status]}`}>
                      {appointment.status}
                    </span>
                  </td>
                  <td className="px-4 py-4 whitespace-nowrap text-sm">
                    <div className="flex space-x-2">
                      {/* Reassign button */}
                      <Button 
                        variant="outline" 
                        size="sm" 
                        onClick={() => openReassignModal(appointment)}
                      >
                        Reassign
                      </Button>
                      
                      {/* Status change buttons */}
                      {appointment.status === 'pending' && (
                        <Button 
                          variant="outline" 
                          size="sm"
                          onClick={() => handleStatusChange(appointment.id, 'cancelled')}
                          className="text-red-600 border-red-200 hover:bg-red-50"
                        >
                          Cancel
                        </Button>
                      )}
                    </div>
                  </td>
                </tr>
              ))}
            </tbody>
          </table>
        </div>
      )}
      
      {/* Reassignment Modal */}
      <DoctorReassignmentModal
        open={showReassignModal}
        onClose={() => setShowReassignModal(false)}
        appointment={selectedAppointment}
        onReassignmentComplete={handleReassignmentComplete}
      />
    </div>
  );
};

export default AdminAppointmentsManager;
